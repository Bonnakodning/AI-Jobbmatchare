import streamlit as st
from sentence_transformers import SentenceTransformer, util

# Din AI-profil
user_profile = """
Jag √§r projektledare, QA manager och producer med erfarenhet inom iGaming och spelutveckling.
S√∂ker roller som projektledare, manager, QA manager eller producer.
Vill jobba hemifr√•n, hybrid eller i Sk√∂vde, men kan √§ven pendla till G√∂teborg eller Stockholm 1 g√•ng/vecka.
S√∂ker frihet, l√∂n √∂ver 40 000 kr/m√•n, kreativ arbetsmilj√∂.
Gillar svenska f√∂retag, g√§rna Sk√∂vdebaserade.
Styrkor: ledarskap, kreativitet, QA, struktur, positivitet, inkluderande arbetss√§tt.
"""

# Modell f√∂r AI-matchning
model = SentenceTransformer("all-MiniLM-L6-v2")
profile_embedding = model.encode(user_profile, convert_to_tensor=True)

# Streamlit-gr√§nssnitt
st.set_page_config(page_title="AI-jobbmatchare", layout="centered")
st.title("ü§ñ AI-jobbmatchare")
st.write("Klistra in jobbannonser nedan, en per rad. Klicka p√• *Analysera* f√∂r att se vilka som passar dig b√§st.")

input_text = st.text_area("üìã Jobbannonser", height=200, placeholder="Exempel:\nProducent till spelstudio i G√∂teborg...\nQA Manager till fintechbolag i Stockholm...")

if st.button("Analysera"):
    if input_text.strip() == "":
        st.warning("Du m√•ste klistra in minst en jobbannons.")
    else:
        ads = [line.strip() for line in input_text.strip().split('\n') if line.strip()]
        results = []
        for ad in ads:
            ad_embedding = model.encode(ad, convert_to_tensor=True)
            score = util.cos_sim(profile_embedding, ad_embedding).item()
            results.append((score, ad))
        sorted_results = sorted(results, key=lambda x: x[0], reverse=True)

        st.subheader("üìä Matchningsresultat:")
        for i, (score, ad) in enumerate(sorted_results, 1):
            st.markdown(f"**#{i} ‚Äì Matchning: {round(score*100, 1)}%**\n\n{ad}\n---")
